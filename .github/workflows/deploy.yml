name: Deploy to Kubernetes

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.corporate-intel.com
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name corporate-intel-staging --region us-east-1

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=staging-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Staging
        run: |
          chmod +x scripts/deploy-staging.sh
          ./scripts/deploy-staging.sh ${{ steps.version.outputs.version }}

      - name: Run smoke tests
        run: |
          kubectl run smoke-test \
            --image=curlimages/curl:latest \
            --namespace=staging \
            --restart=Never \
            --rm -it \
            --command -- sh -c "
              curl -sf https://staging-api.corporate-intel.com/health &&
              curl -sf https://staging-api.corporate-intel.com/api/v1/health
            "

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Staging Deployment: ${{ job.status }}
            Version: ${{ steps.version.outputs.version }}
            Actor: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://corporate-intel.com
    permissions:
      contents: write
      packages: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
          aws-region: us-east-1

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name corporate-intel-production --region us-east-1

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Pre-deployment backup
        run: |
          chmod +x scripts/backup/backup-database.sh
          ./scripts/backup/backup-database.sh

      - name: Deploy to Production
        run: |
          chmod +x scripts/deploy-production.sh
          echo "yes" | ./scripts/deploy-production.sh ${{ steps.version.outputs.version }}

      - name: Run smoke tests
        run: |
          kubectl run smoke-test \
            --image=curlimages/curl:latest \
            --namespace=production \
            --restart=Never \
            --rm -it \
            --command -- sh -c "
              curl -sf https://api.corporate-intel.com/health &&
              curl -sf https://api.corporate-intel.com/api/v1/health
            "

      - name: Run performance tests
        continue-on-error: true
        run: |
          npm install -g k6
          k6 run --vus 10 --duration 1m tests/performance/k6-script.js

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          draft: false
          prerelease: false

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            ðŸš€ Production Deployment: ${{ job.status }}
            Version: ${{ steps.version.outputs.version }}
            Actor: ${{ github.actor }}
            URL: https://corporate-intel.com
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          mention: here
          if_mention: failure

  canary-deployment:
    name: Canary Deployment
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: production-canary

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
          aws-region: us-east-1

      - name: Setup kubectl and Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Deploy Canary (10%)
        run: |
          chmod +x scripts/canary-deploy.sh
          ./scripts/canary-deploy.sh ${{ github.event.inputs.version }} 10

      - name: Monitor canary metrics
        run: |
          sleep 300  # Monitor for 5 minutes
          # Check error rates and latency

      - name: Promote canary to 50%
        run: |
          ./scripts/canary-deploy.sh ${{ github.event.inputs.version }} 50
          sleep 300

      - name: Promote canary to 100%
        run: |
          ./scripts/canary-deploy.sh ${{ github.event.inputs.version }} 100

      - name: Rollback on failure
        if: failure()
        run: |
          kubectl rollout undo deployment/prod-corporate-intel-api -n production

  rollback:
    name: Rollback Deployment
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: rollback-production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3

      - name: Rollback production
        run: |
          chmod +x scripts/rollback.sh
          ./scripts/rollback.sh production

      - name: Verify rollback
        run: |
          kubectl rollout status deployment/prod-corporate-intel-api -n production

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: 'ðŸ”„ Production rollback completed',
              attachments: [{
                color: 'warning',
                text: 'Production has been rolled back by ${{ github.actor }}'
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
